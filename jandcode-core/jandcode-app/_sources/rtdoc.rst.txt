

Rt конфигурация
@@@@@@@@@@@@@@@

.. contents::
    :local:


.. _rt//app:

<app>
####################################################################################################################################################################################

*Узел:* ``app`` 

.. contents::
    :local:

В этом узле хранятся свойства приложения.

.. code-block:: xml

    // file: d:/project/myproject/app.rt
    <root>
        <app appdir="W:\p\_RELEASE_\jandcode-core\jandcode-core\jandcode-app\temp\doc._src\rtdoc" debug="true"/>
    </root>


.. _rt//app//appdir:

appdir="path"
************************************************************************************************************************************************************************************

*Атрибут:* ``app:appdir``, *тип:* ``path``

Каталог приложения. Определяет корневой каталог приложения. Если не задан, определяется
как каталог, из которого был загружен файл конфигурации приложения. Обычно используется
для указания каталога приложения в случаях, когда конфигурация приложения загружается
не из каталога приложения. Например, таким образом можно сообщить
*"каталогом приложения является каталог, в котором лежит файл app.rt"*:

.. code-block:: xml

    // file: d:/project/myproject/app.rt
    <root>
        <app appdir="W:\p\_RELEASE_\jandcode-core\jandcode-core\jandcode-app\temp\doc._src\rtdoc"/>
    </root>

В этом случае значение атрибута ``appdir=d:/project/myproject``.



.. _rt//app//debug:

debug="bool"
************************************************************************************************************************************************************************************

*Атрибут:* ``app:debug``, *тип:* ``bool``

При значении ``true`` приложение работает в отладочном режиме. По умолчанию ``false``.
Отладочный режим можно, например, использовать для формирования расширенных
сообщений об ошибках или вывода отладочной информации непосредственно в приложении.
В приложении доступно через ``App.isDebug()`` или ``App.isRelease()``.
Пример:

.. code-block:: xml

    <root>
        <app debug="true"/>
    </root>

При этой настройке:

.. code-block:: java

    assert App.isDebug() == true
    assert App.isRelease() == false



.. _rt//service:

<service>
####################################################################################################################################################################################

*Узел:* ``service`` , *тип:* ``list``

.. contents::
    :local:

Описание сервисов приложение.


.. _rt//service/ITEM:

<ITEM>
************************************************************************************************************************************************************************************

*Узел:* ``service/ITEM`` 

.. contents::
    :local:

Сервис. Имя узла - имя сервиса. В качестве имени **должен** быть указан
класс-интерфейс сервиса


.. _rt//service/ITEM//class:

class="class"
====================================================================================================================================================================================

*Атрибут:* ``service/ITEM:class``, *тип:* ``class``

Класс-реализатор сервиса



.. _rt//error:

<error>
####################################################################################################################################################################################

*Узел:* ``error`` 

.. contents::
    :local:

Настройки для сервиса ошибок


.. _rt//error/formatter:

<formatter>
************************************************************************************************************************************************************************************

*Узел:* ``error/formatter`` 

.. contents::
    :local:

Настройка форматировщиков ошибок


.. _rt//error/formatter/ITEM:

<ITEM>
====================================================================================================================================================================================

*Узел:* ``error/formatter/ITEM`` 

.. contents::
    :local:

Настройка форматировщика ошибок


.. _rt//error/formatter/ITEM//class:

class="class"
------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

*Атрибут:* ``error/formatter/ITEM:class``, *тип:* ``class``

Имя класса форматировщика ошибок. Можно не указывать, тогда
будет использован класс по умолчанию.
Должен реализовывать интерфейсы:
jandcode.utils.error.ErrorFormatter и
jandcode.utils.rt.IRtLinkSet



.. _rt//error/formatter/ITEM//showSource:

showSource="boolean"
------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

*Атрибут:* ``error/formatter/ITEM:showSource``, *тип:* ``boolean``

Показывать ли текст скрипта, где возникла ошибка.
По умолчанию false.



.. _rt//error/formatter/ITEM//showStack:

showStack="boolean"
------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

*Атрибут:* ``error/formatter/ITEM:showStack``, *тип:* ``boolean``

Показывать ли стек.
По умолчанию false.



.. _rt//error/formatter/ITEM//showFullStack:

showFullStack="boolean"
------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

*Атрибут:* ``error/formatter/ITEM:showFullStack``, *тип:* ``boolean``

Показывать ли полный стек.
По умолчанию false. В случае false и showStack=true будет показан
отфильтрованный стек без сильно внутренних методов.


