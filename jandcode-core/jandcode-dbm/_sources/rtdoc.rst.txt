

Rt конфигурация
@@@@@@@@@@@@@@@

.. contents::
    :local:


.. _rt//dbm:

<dbm>
####################################################################################################################################################################################

*Узел:* ``dbm`` 

.. contents::
    :local:

Настройки для модуля dbm


.. _rt//dbm/registermodel:

<registermodel>
************************************************************************************************************************************************************************************

*Узел:* ``dbm/registermodel`` , *тип:* ``list``

.. contents::
    :local:

Список зарегистрированных моделей


.. _rt//dbm/registermodel/MODEL-NAME:

<MODEL-NAME>
====================================================================================================================================================================================

*Узел:* ``dbm/registermodel/MODEL-NAME`` 

.. contents::
    :local:

Регистрация модели, указанной в атрибуте ``model`` с именем ``MODEL-NAME``


.. _rt//dbm/registermodel/MODEL-NAME//model:

model="string"
------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

*Атрибут:* ``dbm/registermodel/MODEL-NAME:model``, *тип:* ``string``

Имя модели



.. _rt//model:

<model>
####################################################################################################################################################################################

*Узел:* ``model`` , *тип:* ``list``

.. contents::
    :local:

Описание моделей.


.. _rt//model/MODEL-NAME:

<MODEL-NAME>
************************************************************************************************************************************************************************************

*Узел:* ``model/MODEL-NAME`` 

.. contents::
    :local:

Описание модели


.. _rt//model/MODEL-NAME/service:

<service>
====================================================================================================================================================================================

*Узел:* ``model/MODEL-NAME/service`` 

.. contents::
    :local:

Сервисы модели


.. _rt//model/MODEL-NAME/service/SERVICE-NAME:

<SERVICE-NAME>
------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

*Узел:* ``model/MODEL-NAME/service/SERVICE-NAME`` 

.. contents::
    :local:

Сервис модели


.. _rt//model/MODEL-NAME/field:

<field>
====================================================================================================================================================================================

*Узел:* ``model/MODEL-NAME/field`` 

.. contents::
    :local:

Поля модели


.. _rt//model/MODEL-NAME/field/FIELD-NAME:

<FIELD-NAME>
------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

*Узел:* ``model/MODEL-NAME/field/FIELD-NAME`` 

.. contents::
    :local:

Поле модели


.. _rt//model/MODEL-NAME/field/FIELD-NAME//db.refcascade:

db.refcascade="bool"
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

*Атрибут:* ``model/MODEL-NAME/field/FIELD-NAME:db.refcascade``, *тип:* ``bool``

При значении ``true`` для поля необходимо генерировать в базе данных
какскадную ссылку. Обычно указывается для ``ref`` поля.

.. code-block:: xml

    <root>
        <domain name="MyTable" parent="id" tag.db="true">
            <ref db.refcascade="true"/>
        </domain>
    </root>



.. _rt//model/MODEL-NAME/field/FIELD-NAME/validator:

<validator>
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

*Узел:* ``model/MODEL-NAME/field/FIELD-NAME/validator`` 

.. contents::
    :local:

Валидаторы поля


.. _rt//model/MODEL-NAME/field/FIELD-NAME/validator/VALIDATOR-NAME:

<VALIDATOR-NAME>
""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""

*Узел:* ``model/MODEL-NAME/field/FIELD-NAME/validator/VALIDATOR-NAME`` 

.. contents::
    :local:

Валидатор поля. См. :ref:`rt//model/MODEL-NAME/domain/DOMAIN-NAME/validator`.


.. _rt//model/MODEL-NAME/domain:

<domain>
====================================================================================================================================================================================

*Узел:* ``model/MODEL-NAME/domain`` 

.. contents::
    :local:

Домены модели


.. _rt//model/MODEL-NAME/domain/DOMAIN-NAME:

<DOMAIN-NAME>
------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

*Узел:* ``model/MODEL-NAME/domain/DOMAIN-NAME`` 

.. contents::
    :local:

Домен модели


.. _rt//model/MODEL-NAME/domain/DOMAIN-NAME//abstract:

abstract="bool"
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

*Атрибут:* ``model/MODEL-NAME/domain/DOMAIN-NAME:abstract``, *тип:* ``bool``

Признак того, что домен абстрактный. Такой домен не включается в модель.
Используется как базовый предок. Атрибут не наследуется.



.. _rt//model/MODEL-NAME/domain/DOMAIN-NAME//tag.db:

tag.db="bool"
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

*Атрибут:* ``model/MODEL-NAME/domain/DOMAIN-NAME:tag.db``, *тип:* ``bool``

Признак того, что домен является описанием физической таблицы в базе данных.
Атрибут не наследуется.



.. _rt//model/MODEL-NAME/domain/DOMAIN-NAME//tag.dbview:

tag.dbview="bool"
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

*Атрибут:* ``model/MODEL-NAME/domain/DOMAIN-NAME:tag.dbview``, *тип:* ``bool``

Признак того, что домен является описанием физического view в базе данных.
Если атрибут указан, то атрибут ``tag.db`` проставляется автоматически.
Текст sql для view должен быть в узле ``ddl/view``. Атрибут не наследуется.
Пример:

.. code-block:: xml

    <domain name="View1" parent="id" tag.dbview="true">
        <ddl name="view">
            create view View1 as select * from Tab1
        </ddl>
    </domain>



.. _rt//model/MODEL-NAME/domain/DOMAIN-NAME//tag.dao:

tag.dao="bool"
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

*Атрибут:* ``model/MODEL-NAME/domain/DOMAIN-NAME:tag.dao``, *тип:* ``bool``

Признак того, что домен содержит в себе dao-объекты.
Если у домена имеются личные dao, то атрибут ставится
автоматически.
Атрибут не наследуется.



.. _rt//model/MODEL-NAME/domain/DOMAIN-NAME//tag.dict:

tag.dict="bool"
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

*Атрибут:* ``model/MODEL-NAME/domain/DOMAIN-NAME:tag.dict``, *тип:* ``bool``

Признак того, что домен является описанием словаря.
Атрибуты словаря указываются в дочернем элементе ``dict``.
Атрибут не наследуется.



.. _rt//model/MODEL-NAME/domain/DOMAIN-NAME//tablename:

tablename="string"
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

*Атрибут:* ``model/MODEL-NAME/domain/DOMAIN-NAME:tablename``, *тип:* ``string``

Имя физической таблицы в базе данных для домена.
Если у домена есть атрибут ``tag.db`` или ``tag.dbview``,
то значение атрибута автоматически устанавливается в
имя домена.



.. _rt//model/MODEL-NAME/domain/DOMAIN-NAME//db.genidstart:

db.genidstart="long"
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

*Атрибут:* ``model/MODEL-NAME/domain/DOMAIN-NAME:db.genidstart``, *тип:* ``long``

С какого числа начинать генерацию id. Этим числом инициализируется генератор
id при создании базы данных. По умолчанию ``1000``.



.. _rt//model/MODEL-NAME/domain/DOMAIN-NAME/ref:

<ref>
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

*Узел:* ``model/MODEL-NAME/domain/DOMAIN-NAME/ref`` 

.. contents::
    :local:

В этом узле описываются свойства поля, которое является
ссылкой на этот домен. Все что можно указать для ``model/MODEL-NAME/field/FIELD-NAME``,
можно указывать и тут. Что бы поле было унаследовано от этого узла,
нужно указывать для него parent ``DOMAIN-NAME/ref``.
Пример:

.. code-block:: xml

    <domain name="Tree1" parent="dbtable" tag.db="true">
        <ref title="Ссылка на узел дерева"/>

        <field name="name" parent="string" size="30"/>
        <field name="parent" parent="Tree1/ref"/>
    </domain>


.. _rt//model/MODEL-NAME/domain/DOMAIN-NAME/validator:

<validator>
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

*Узел:* ``model/MODEL-NAME/domain/DOMAIN-NAME/validator`` 

.. contents::
    :local:

Валидаторы домена


.. _rt//model/MODEL-NAME/domain/DOMAIN-NAME/validator/VALIDATOR-NAME:

<VALIDATOR-NAME>
""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""

*Узел:* ``model/MODEL-NAME/domain/DOMAIN-NAME/validator/VALIDATOR-NAME`` 

.. contents::
    :local:

Валидатор. Можно не указывать ``parent``, тогда в качестве
``parent`` возмется имя валидатора, например:

.. code-block:: xml

    <domain name="Domain1" parent="dbtable">
        <validator name="record"/>
    </domain>

соответствует:

.. code-block:: xml

    <domain name="Domain1" parent="dbtable">
        <validator name="record" parent="record"/>
    </domain>


.. _rt//model/MODEL-NAME/domain/DOMAIN-NAME/dataloader:

<dataloader>
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

*Узел:* ``model/MODEL-NAME/domain/DOMAIN-NAME/dataloader`` 

.. contents::
    :local:

Загрузчики данных.


.. _rt//model/MODEL-NAME/domain/DOMAIN-NAME/dataloader/DATALOADER-NAME:

<DATALOADER-NAME>
""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""

*Узел:* ``model/MODEL-NAME/domain/DOMAIN-NAME/dataloader/DATALOADER-NAME`` 

.. contents::
    :local:

Загрузчик данных


.. _rt//model/MODEL-NAME/domain/DOMAIN-NAME/dataloader/DATALOADER-NAME//dbdata:

dbdata="string"
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

*Атрибут:* ``model/MODEL-NAME/domain/DOMAIN-NAME/dataloader/DATALOADER-NAME:dbdata``, *тип:* ``string``

Тип загрузчика. Значением может быть:

    * ``prod`` - данные таблицы в базе по умолчанию
    * ``test`` - тестовые данные таблицы в базе
    * любое другое - для каких-то других целей

По умолчанию значение не установлено



.. _rt//model/MODEL-NAME/domain/DOMAIN-NAME/dbindex:

<dbindex>
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

*Узел:* ``model/MODEL-NAME/domain/DOMAIN-NAME/dbindex`` 

.. contents::
    :local:

Описание db-индексов для генерации базы данных


.. _rt//model/MODEL-NAME/domain/DOMAIN-NAME/dbindex/DBINDEX-NAME:

<DBINDEX-NAME>
""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""

*Узел:* ``model/MODEL-NAME/domain/DOMAIN-NAME/dbindex/DBINDEX-NAME`` 

.. contents::
    :local:

Индекс таблицы для базы данных. Имя узла используется для
генерации имени индекса.


.. _rt//model/MODEL-NAME/domain/DOMAIN-NAME/dbindex/DBINDEX-NAME//fields:

fields="string"
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

*Атрибут:* ``model/MODEL-NAME/domain/DOMAIN-NAME/dbindex/DBINDEX-NAME:fields``, *тип:* ``string``

Список полей (через ``','``), из которых состоит индекс.
Если имя поля начинается с символа '*', то это означает, что сортировать
это поле нужно в обратном порядке (по убыванию).

.. code-block:: xml

    <root>
        <domain name="MyTable" parent="id" tag.db="true">
            <field name="name" parent="string" size="20"/>
            <field name="dt" parent="date" />

            <dbindex name="myindex1" fields="name,*dt" unique="true"/>
            <dbindex name="myindex2" fields="dt"/>
        </domain>
    </root>



.. _rt//model/MODEL-NAME/domain/DOMAIN-NAME/dbindex/DBINDEX-NAME//unique:

unique="bool"
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

*Атрибут:* ``model/MODEL-NAME/domain/DOMAIN-NAME/dbindex/DBINDEX-NAME:unique``, *тип:* ``bool``

Признак уникального индекса. По умолчанию ``false``.



.. _rt//model/MODEL-NAME/domain/DOMAIN-NAME/ddl:

<ddl>
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

*Узел:* ``model/MODEL-NAME/domain/DOMAIN-NAME/ddl`` 

.. contents::
    :local:

Поименнованые ddl-опрераторы.


.. _rt//model/MODEL-NAME/domain/DOMAIN-NAME/ddl/DDL-NAME:

<DDL-NAME>
""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""

*Узел:* ``model/MODEL-NAME/domain/DOMAIN-NAME/ddl/DDL-NAME`` 

.. contents::
    :local:

ddl оператор

.. code-block:: xml

    <root>
        <domain name="MyTable" parent="id" tag.db="true">
            <field name="name" parent="string" size="20"/>
            <field name="dt" parent="date" />

            <ddl name="myddl1" type="create">
                alter table my1 add _logfield varchar(20)
            </ddl>

            <ddl name="myddl2" type="create">
                alter table my1 add _logfield2 varchar(20)
            </ddl>
        </domain>
    </root>


.. _rt//model/MODEL-NAME/domain/DOMAIN-NAME/ddl/DDL-NAME//type:

type="string"
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

*Атрибут:* ``model/MODEL-NAME/domain/DOMAIN-NAME/ddl/DDL-NAME:type``, *тип:* ``string``

Если оператор имеет атрибут ``type="create"`` (значение по умолчанию),
то эти операторы попадают в сгенерированный sql для создания базы данных.



.. _rt//model/MODEL-NAME/db:

<db>
====================================================================================================================================================================================

*Узел:* ``model/MODEL-NAME/db`` 

.. contents::
    :local:

Базы данных, связанные с моделью. Обычно в модели
одна база данных и она имеет имя ``default``.


.. _rt//model/MODEL-NAME/db/DB-NAME:

<DB-NAME>
------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

*Узел:* ``model/MODEL-NAME/db/DB-NAME`` 

.. contents::
    :local:

База данных связанная с моделью.


.. _rt//model/MODEL-NAME/db/DB-NAME//database:

database="string"
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

*Атрибут:* ``model/MODEL-NAME/db/DB-NAME:database``, *тип:* ``string``

Имя базы данных.



.. _rt//model/MODEL-NAME/db/DB-NAME//dbdriver:

dbdriver="string"
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

*Атрибут:* ``model/MODEL-NAME/db/DB-NAME:dbdriver``, *тип:* ``string``

Имя драйвера базы данных. Драйвера описываются в ``/dbdriver/DBDRIVER-NAME``.



.. _rt//model/MODEL-NAME/db/DB-NAME//host:

host="string"
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

*Атрибут:* ``model/MODEL-NAME/db/DB-NAME:host``, *тип:* ``string``

Адрес хоста.



.. _rt//model/MODEL-NAME/db/DB-NAME//jdbcDriverClass:

jdbcDriverClass="string"
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

*Атрибут:* ``model/MODEL-NAME/db/DB-NAME:jdbcDriverClass``, *тип:* ``string``

Имя класса jdbc-драйвера. Обычно не нужно его указывать, т.к. используется
класс из ``dbdriver``.



.. _rt//model/MODEL-NAME/db/DB-NAME//username:

username="string"
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

*Атрибут:* ``model/MODEL-NAME/db/DB-NAME:username``, *тип:* ``string``

Имя пользователя базы данных для коннекта.



.. _rt//model/MODEL-NAME/db/DB-NAME//password:

password="string"
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

*Атрибут:* ``model/MODEL-NAME/db/DB-NAME:password``, *тип:* ``string``

Пароль пользователя базы данных для коннекта.



.. _rt//model/MODEL-NAME/db/DB-NAME//url:

url="string"
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

*Атрибут:* ``model/MODEL-NAME/db/DB-NAME:url``, *тип:* ``string``

Строка соединения. Можно использовать подстановки ``${property}``
(например ``'${username}'``). В качестве ``property`` можно использовать
любые атрибуты из узла ``db``.

Обычно ``url`` явно не указывается, а берется из ``dbdriver``.



.. _rt//model/MODEL-NAME/db/DB-NAME//conn.XXX:

conn.XXX="string"
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

*Атрибут:* ``model/MODEL-NAME/db/DB-NAME:conn.XXX``, *тип:* ``string``

Свойства соединения. В таких атрибутах отбрасывается префикс ``conn.`` и остаток
используется как имя свойства соединения. Зависит от драйвера.



.. _rt//model/MODEL-NAME/db/DB-NAME//config.path:

config.path="string"
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

*Атрибут:* ``model/MODEL-NAME/db/DB-NAME:config.path``, *тип:* ``string``

Путь rt, относительно корня конфигурации приложения, откуда будут браться
дополнительные свойства базы данных. Эти данные перекроют те, которые
указаны в узле ``db/DB-NAME`` модели.

Используется для выноса конфигурации в более приемлемое место для
конечного пользователя.

Если не установлено, то по умолчанию принимается равным ``db/MODEL-NAME``.



.. _rt//model/MODEL-NAME/dataloader:

<dataloader>
====================================================================================================================================================================================

*Узел:* ``model/MODEL-NAME/dataloader`` 

.. contents::
    :local:

Предки для загрузчиков данных.


.. _rt//model/MODEL-NAME/dataloader/DATALOADER-NAME:

<DATALOADER-NAME>
------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

*Узел:* ``model/MODEL-NAME/dataloader/DATALOADER-NAME`` 

.. contents::
    :local:

Загрузчик данных

